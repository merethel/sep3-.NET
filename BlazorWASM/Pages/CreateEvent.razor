@page "/CreateEvent"
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using global::Shared.Dtos
@using HttpClients.Implementations
@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns
@inject IEventService EventService

<link href="css/Login.css" rel="stylesheet"/>
<h3 style="text-align: center">Create Your Event</h3>


<div class="card">
    <div>
        <label>
            <b>Title</b>
        </label><br/>
        <input class="full-width" type="text" @bind="Title" @bind:event="oninput"/>
    </div>
    <div>
        <label>
            <b>Description</b>
        </label><br/>
        <input class="full-width" type="text" @bind="Description" @bind:event="oninput"/>
    </div>
    <div>
        <label>
            <b>Location</b>
        </label><br/>
        <input class="full-width" type="text" @bind="location" @bind:event="oninput"/>
    </div>
    <div>
        <label>
            <b>Date</b>
        </label><br/>
        <a style="font-size: small">Day</a> <input class="smallinput" type="text" @bind="day" @bind:event="oninput"/>
        <a style="font-size: small">Month</a> <input class="smallinput" type="text" @bind="month" @bind:event="oninput"/>
        <a style="font-size: small">Year</a> <input style="width: 60px" class="smallinput" type="text" @bind="year" @bind:event="oninput"/>
    </div>
    <div>
        <label>
            <b>Time</b>
        </label><br/>
        <input class="smallinput" type="text" @bind="hour" @bind:event="oninput"/><b style="font-size: large"> :</b>
        <input class="smallinput" type="text" @bind="min" @bind:event="oninput"/>
    </div>
    
    <EditForm Model="@category">
        <div>
            <label>
                <b>Category</b>
            </label><br/>
            <InputSelect id="category" @bind-Value="category">
                <option value="Motion">Motion</option>
                <option value="Spil">Spil</option>
                <option value="Klima">Klima</option>
            </InputSelect>

        </div>
    </EditForm>
        <EditForm Model="@area">
    <div>
        <label>
            <b>Area</b>
        </label><br/>
        <InputSelect id="area" @bind-Value="area">
            <option value="Sjælland">Sjælland</option>
            <option value="Fyn">Fyn</option>
            <option value="Jylland">Jylland</option>
        </InputSelect>
    </div>
    </EditForm>
    
    <div>
        @if (!string.IsNullOrEmpty(ResultMsg))
        {
            <label style="color: @Color">@ResultMsg</label>
        }
    </div>
    <div class="button-container">
        <button class="confirm-button" @onclick="Create" disabled="@(string.IsNullOrEmpty(Title) || string.IsNullOrEmpty(Description) || string.IsNullOrEmpty(year) || string.IsNullOrEmpty(month) || string.IsNullOrEmpty(day) || string.IsNullOrEmpty(hour) || string.IsNullOrEmpty(min))">Create Event</button>
    </div>
</div>


@code {
    private string Title = "";
    private string Description = "";

    private string year = "";
    private string month = "";
    private string day = "";

    private string hour = "";
    private string min = "";

    private DateTime DateTime;
    private string ResultMsg = "";
    private string Color = "";
    private string? username = "";
    private string location = "";
    private string category = "";
    private string area = "";

    private async Task Create()
    {
        ResultMsg = "";

        try
        {
            DateTime = new DateTime(
                Int32.Parse(year),
                Int32.Parse(month),
                Int32.Parse(day),
                Int32.Parse(hour),
                Int32.Parse(min),
                0);
        }
        
        
        
        catch (Exception e)
        {
            Color = "red";
            ResultMsg = "Invalid date or time";
            return;
        }

        try
        {
            username = JwtAuthService.Username;
            await EventService.CreateAsync(new EventCreationDto(username, Title, Description, location, DateTime));
            Title = "";
            Description = "";
            location = "";
            year = "";
            month = "";
            day = "";
            hour = "";
            min = "";
            category = "";
            area = "";

            DateTime = DateTime.MaxValue;

            ResultMsg = "Event created!";
            Color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ResultMsg = e.Message;
            Color = "red";
        }
    }

    private Task bindArea(string area)
    {
        this.area = area;
        return Task.FromResult(area);
    }
    
    private Task bindCategory(string category)
    {
        this.category = category;
        return Task.FromResult(category);
    }

}