@page "/Events"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using HttpClients.Implementations
@inject IEventService EventService
@inject IUserService UserService

<h3 style="text-align: center">Events</h3>

@if (events == null)
{
    <p>Loading...</p>
}
else if (!events.Any())
{
    <p>No Events available</p>
}
else
{
    @foreach (Event item in events)
    {
        <div class="card">
            <div class="boxes">
                <b>Title:</b>
                    <label>@item.Title</label>
            </div>
             
        <div class="boxes">
            <b>Owner:</b>
            <label>@item.Owner.Username</label>
        </div>
        
            <div class="boxes">
                <b>Location:</b>
                <label>@item.Location</label>
            </div>

            <div class="boxes">
                <b>Date and time:</b>
                <label>@item.DateTime</label>
            </div>
                
            <div class="boxes">
                <b>Description:</b>
                <div id="Description">
                    @item.Description
                </div>
                
                <AuthorizeView>
                <div class="button-container">
                    <button class="confirm"
                            @onclick="async ()=>RegisterAttendee(await UserService.getUserId(JwtAuthService.Username),item.Id)">
                        Tilmeld begivenhed
                    </button>
                </div>
                </AuthorizeView>
            </div>
            </div>
        <br/>
                                
    }

}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}


@code {
    private ICollection<Event>? events;
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            events = await EventService.GetEvents();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task RegisterAttendee(int userId, int eventId){
        EventService.RegisterAttendeeAsync(userId, eventId);
    }
}