@page "/MyEvents"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using global::Shared.Dtos
@using System.Security.Claims
@inject IEventService EventService
@inject IAuthService AuthService

<div class="container-pages">
    <h3 class="page-header" style="text-align: center">Mine begivenheder</h3>

    @* Indlæser siden og tjekker for events*@
    @if (_events == null)
    {
        <p>Indlæser...</p>
    }
    else if (!_events.Any())
    {
        <p>Ingen begivenheder at finde</p>
    }
    else
    @* Indlæser begivenheder*@
    {
        <div style="text-align: center; align-content: center; display: flex; flex-direction: column-reverse;">

            @foreach (Event item in _events)
            {
                <div >
                    @* Tilknytter billede relevant til den enkelte begivenheds kategori*@
                    <div class="card-events">

                        @if (item.Category.Equals("Motion"))
                        {
                            <div class="boxes" style="background-image: url('img/excercise.jpg'); height: 100px">

                            </div>
                        }

                        @if (item.Category.Equals("Klima"))
                        {
                            <div class="boxes" style="background-image: url('img/climate.jpg'); height: 100px">

                            </div>
                        }

                        @if (item.Category.Equals("Spil"))
                        {
                            <div class="boxes" style="background-image: url('img/boardgames.jpg'); height: 100px">

                            </div>
                        }

                        @* Begivenhedsinformationer*@
                        <div class="boxes" style="padding-bottom: 0px">
                            <label class="card-title">@item.Title</label>
                        </div>
                        <div class="boxes" style="padding-top: 0px">
                            Afholdes af
                            <label class="card-creater">
                                <b>@item.Owner.Username</b>
                            </label>
                        </div>
                        <br/>
                        <br/>

                        <div class="boxes">
                            <b>Beskrivelse:</b>
                            <div class="card-description" id="Description">
                                @item.Description
                            </div>

                            <div class="button-container">
                                <button class="btn btn-outline-dark"
                                        @onclick="@(() => CancelEvent(item.Id))">
                                    Aflys begivenhed
                                </button>
                            </div>

                            <br/>

                            <div style="display: flex; align-items: flex-start ">
                                <div class="boxes">
                                    <b>Kategori:</b>
                                    <br/>
                                    <label class="card-category">@item.Category</label>
                                </div>

                                <div class="boxes">
                                    <b>Område og lokation:</b>
                                    <label class="card-area">@item.Area, @item.Location</label>
                                </div>

                                <div class="boxes">
                                    <b>Dato og tid:</b>
                                    <label class="card-datetime">@item.DateTime</label>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                <br/>
            }
        </div>
    }

</div>

@code {
    private ICollection<Event>? _events;
    private int _userId;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ClaimsPrincipal claimsPrincipal = await AuthService.GetAuthAsync();

            foreach (var claim in claimsPrincipal.Claims)
            {
                if (claim.Type.Equals("UserId"))
                {
                    _userId = Int32.Parse(claim.Value);
                }
            }
            _events = await EventService.GetEvents(new CriteriaDto
            {
                OwnerId = _userId
            });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
    private async Task CancelEvent(int eventId)
    {
        var userId = this._userId;
        await EventService.CancelAsync(eventId);
        _events = await EventService.GetEvents(new CriteriaDto()
        {
            OwnerId = userId
        });
    }
}