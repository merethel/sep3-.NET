@page "/MyEvents"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using HttpClients.Implementations
@using global::Shared.Dtos
@inject IEventService EventService
@inject IUserService UserService

<div class="container-pages">
<h3 class="page-header" style="text-align: center">Mine begivenheder</h3>

@if (_events == null)
{
    <p>Indlæser...</p>
}
else if (!_events.Any())
{
    <p>Ingen begivenheder at finde</p>
}
else
{
     <div style="text-align: center; align-content: center;">

            @foreach (Event item in _events)
            {
                <div >
                    <div class="card-events">

                        @if (item.Category.Equals("Motion"))
                        {
                            <div class="boxes" style="background-image: url('img/excercise.jpg'); height: 100px">
                                
                            </div>
                        }
                        
                        @if (item.Category.Equals("Klima"))
                        {
                            <div class="boxes" style="background-image: url('img/climate.jpg'); height: 100px">
                                
                            </div>
                        }

                        @if (item.Category.Equals("Spil"))
                        {
                            <div class="boxes" style="background-image: url('img/boardgames.jpg'); height: 100px">
                                
                            </div>
                        }

                        <div class="boxes" style="padding-bottom: 0px">
                            <label class="card-title">@item.Title</label>
                        </div>
                        <div class="boxes" style="padding-top: 0px">
                            Afholdes af
                            <label class="card-creater">
                                <b>@item.Owner.Username</b>
                            </label>
                        </div>
                        <br/>
                        <br/>

                        <div class="boxes">
                            <b>Beskrivelse:</b>
                            <div class="card-description" id="Description">
                                @item.Description
                            </div>

                            <div style="display: flex; align-items: flex-start ">
                                <div class="boxes">
                                    <b>Kategori</b>
                                    <label class="card-category">@item.Category</label>
                                </div>

                                <div class="boxes">
                                    <b>Område og lokation:</b>
                                    <label class="card-area">@item.Area, @item.Location</label>
                                </div>

                                <div class="boxes">
                                    <b>Dato og tid:</b>
                                    <label class="card-datetime">@item.DateTime</label>
                                </div>
                            </div>


                        </div>
                    </div>
                </div>
                <br/>
            }
        </div>
                                
    }

</div>

@code {
    private ICollection<Event>? _events;
    private int _userId;
    private string? _msg;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            /*ClaimsPrincipal claimsPrincipal = await AuthService.GetAuthAsync();

            foreach (var claim in claimsPrincipal.Claims)
            {
                if (claim.Type.Equals("UserId"))
                {
                    userId = Int32.Parse(claim.Value);
                }
            }*/
            _userId = await UserService.GetUserId(JwtAuthService.Username!);
            _events = await EventService.GetEvents(new CriteriaDto
            {
                OwnerId = _userId
            });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _msg = e.Message;
        }
        
    }

    //knappen disables når du trykker men med et delay, og i dette delay kan du trykke på knappen flere gange hvis du er hurtig.
    private async Task CancelEvent(int eventId)
    {
        var userId = this._userId;
        await EventService.CancelAsync(eventId);
        _events = await EventService.GetEvents(new CriteriaDto()
        {
            OwnerId = userId
        });
    }
    
    // Jeg har fixet at knapperne bliver disabled/enabled alt efter om du er tilmeldt eller ikke.
    
    //2 ting som ikke virker men nu er kl 23:51 og jeg er træt...
    //Der står med grøn skrift "Tilmeldt!" på alle eventsne når man trykker på en tilmend knap.
    //Den opdatere ikke i realtime, så når du har trykket tilmeld disabler den først knappen når du har reloadet siden, det skal også kigges på.
    
}